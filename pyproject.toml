[project]
name = "pytauri-workspace"
version = "0.1.0"
readme = "README.md"
requires-python = ">=3.9"

[dependency-groups]
dev = [
    { include-group = "lint" },
    { include-group = "docs" },
    { include-group = "test" },
    { include-group = "tools" },
    { include-group = "workspaces" },
    { include-group = "examples" },
]
lint = [
    # `pyright` installed by `pnpm`
    "ruff == 0.8.3",
    "typos == 1.28.2",
]
docs = [
    "mkdocs-material == 9.5.*",
    "mkdocstrings[python] == 0.27.*",
    "griffe-inherited-docstrings == 1.1.*",
    "griffe-pydantic == 1.1.*",
    "griffe-warnings-deprecated == 1.1.*",
    "mkdocs-gen-files == 0.5.*",
    "mkdocs-literate-nav == 0.6.*",
    "mkdocs-section-index == 0.3.*",
    "mkdocs-git-revision-date-localized-plugin == 1.3.*",
    "mkdocs-git-committers-plugin-2 == 2.4.*",
    "mike == 2.1.*",
]
test = [
    "pytest == 8.3.*",
    "pytest-cov == 6.0.*",
    "pytest-timeout == 2.3.*",
    "trio == 0.27.0",          # for `pyfuture`
]
tools = ["pre-commit == 4.0.1"]
# NOTE: when adding workspace members,
# remember to update:
# - `preload_modules` in `mkdocs.yml`
# - `[tool.coverage.run.source]` in `pyproject.toml`
# - `scripts/python-verifytypes.sh`
# - `[tool.uv.workspace.members]` in `pyproject.toml`
workspaces = [
    "codelldb",
    "pyfuture",
    "pyo3-utils",
    "pytauri",
    "pytauri-plugin-notification",
    "pytauri-wheel",
    # tests
    "pytauri-test",
]
# NOTE: when adding examples,
# remember to update `[tool.uv.sources]` and `[tool.uv.workspace.members]`
# and [tool.coverage.run.source] in `pyproject.toml`.
examples = [
    "setuptools >= 64",
    "setuptools-scm >= 8",
    "setuptools-rust == 1.*",
    "tauri-app",
    "nicegui-app",
    "tauri-app-wheel",
]


[tool.uv.sources]
tauri-app = { workspace = true }
nicegui-app = { workspace = true }
tauri-app-wheel = { workspace = true }
codelldb = { workspace = true }
pyfuture = { workspace = true }
pyo3-utils = { workspace = true }
pytauri = { workspace = true }
pytauri-plugin-notification = { workspace = true }
pytauri-wheel = { workspace = true }
pytauri-test = { workspace = true }

# https://docs.astral.sh/uv/concepts/workspaces/
[tool.uv.workspace]
members = [
    "python/*",
    "examples/tauri-app/src-tauri",
    "examples/nicegui-app",
    "examples/tauri-app-wheel/python",
    "tests/pytauri-test",
    "python/pytauri-wheel",
]


[tool.pyright]
typeCheckingMode = "strict"
pythonVersion = "3.9"
# see: <https://github.com/microsoft/pyright/blob/1.1.391/docs/configuration.md#environment-options>
exclude = [
    "**/node_modules",
    "**/__pycache__",
    # ðŸ‘‡ necessary, because when `tauri-cli bundles python,
    # it will copy `pyembed` to the target directory (i.e., rust output dir).
    "**/target",
    # ðŸ‘†
    "**/dist",
    "**/.*",
    "./.venv",
    "examples/**/pyembed/",
    "examples/**/frontend/",
]
executionEnvironments = [
    { root = "examples/nicegui-app", pythonVersion = "3.10" },
]


[tool.ruff.format]
docstring-code-format = true

# https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "C4",     # flake8-comprehensions
    "B",      # flake8-bugbear
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "D",      # pydocstyle
    "SIM",    # flake8-simplify
    "RUF",    # unused-noqa
    "Q",      # flake8-quotes
    "C90",    # McCabe complexity
    "ANN001", # missing-type-function-argument
    "ANN201", # missing-return-type-undocumented-public-function
    "ASYNC",  # flake8-async
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "ISC",    # flake8-implicit-str-concat
    "ICN001", # unconventional-import-alias
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "INT",    # flake8-gettext
    "ARG",    # flake8-unused-arguments
    "PGH004", # blanket-noqa
    "TRY201", # Use raise without specifying exception name
    "NPY",    # NumPy-specific rules
    "PD",     # pandas-vet
    "PERF",   # Perflint
    "PL",     # Pylint
    "TID252", # Relative imports from parent modules are banned
]
ignore = [
    "E501",    # line too long, handled by black
    "COM812",  # missing-trailing-comma
    "PERF203", # try-except within a loop incurs performance overhead
    "PLR2004", # magic-value-comparison
    "PLR5501", # collapsible-else-if
    "PLW0120", # useless-else-on-loop
    "PLR0911", # too-many-return-statements
    "PLR0913", # too-many-arguments
    "PLC0205", # single-string-slots
    "PLW0603", # global-statement
    "PLC1901", # compare-to-empty-string
    "PLR0904", # too-many-public-methods
    "RUF002",  # ambiguous-unicode-character-docstring
    "RUF003",  # ambiguous-unicode-character-comment
    "SIM105",  # suppressible-exception # slower
    "ISC001",  # single-line-implicit-string-concatenation
    "D415",    # ends-in-punctuation
    # "D418",    # Function decorated with `@overload` shouldn't contain a docstring
    # "SIM108",  # if-else-block-instead-of-if-exp
]

[tool.ruff.lint.per-file-ignores]
"docs_src/**/*.py" = ["D"]
"examples/**/*.py" = ["D"]
"tests/**/*.py" = ["D"]

# https://docs.astral.sh/ruff/settings/#pydocstyle
[tool.ruff.lint.pydocstyle]
convention = "google"


# https://coverage.readthedocs.io/en/7.3.2/config.html#run
[tool.coverage.run]
branch = true
source = [
    "tauri_app",
    "nicegui_app",
    "codelldb",
    "pyfuture",
    "pyo3_utils",
    "pytauri",
    "pytauri_plugin_notification",
    "pytauri_wheel",
]

# https://coverage.readthedocs.io/en/7.3.2/config.html#report
[tool.coverage.report]
exclude_also = [
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    # # deprecated code will not be tested
    "@(typing_extensions\\.)?deprecated",
    # `overload` just for type hint, will not be tested
    "@(typing_extensions\\.)?overload",
    "@(typing\\.)?overload",
    "raise AssertionError",
]

[tool.pytest.ini_options]
timeout = 15
