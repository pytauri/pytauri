/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type A = number;
export type A1 = number;
export type AS = number;

export interface Commands {
    /**
     * @minItems 2
     * @maxItems 2
     */
    commandA: [Foo, ArrayBuffer];
    /**
     * @minItems 2
     * @maxItems 2
     */
    commandB: [Bar, Bar1];
}
export interface Foo {
    a: A;
    [k: string]: unknown;
}
export interface Bar {
    a: A1;
    b: Foo;
    [k: string]: unknown;
}
export interface Bar1 {
    a_s: AS;
    b: Foo;
    [k: string]: unknown;
}

type InputOutput<I, O> = {
    input: I;
    output: O;
};
type Command = {
    [K in keyof Commands]: InputOutput<Commands[K][0], Commands[K][1]>;
};

type OriInvokeArgs = Parameters<typeof pyInvoke>;
type newInvokeArgs<cmd extends keyof Command> = [
    body: Command[cmd]["input"],
    options: OriInvokeArgs[2],
];
type newInvokeRet<cmd extends keyof Command> = ReturnType<
    typeof pyInvoke<Command[cmd]["output"]>
>;

type F = OriInvokeArgs[1];

import { pyInvoke } from "tauri-plugin-pytauri-api";
import { InvokeOptions } from "@tauri-apps/api/core";

async function commandA(
    body: Command["commandA"]["input"],
    options?: InvokeOptions
): Promise<Command["commandA"]["output"]> {
    return await pyInvoke("commandA", body, options);
}

const a = await commandA({ a: 1 }, { headers: { pyfunc: "commandA" } });

type newInvokeType<cmd extends keyof Command> = (
    body: Command[cmd]["input"],
    options?: InvokeOptions
) => Promise<Command[cmd]["output"]>;

const commandB: newInvokeType<"commandB"> = async (body, options) => {
    return await pyInvoke("commandB", body, options);
};

const b = await commandB(
    { a: 1, b: { a: 1 } },
    { headers: { pyfunc: "commandA" } }
);
